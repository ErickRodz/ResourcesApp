The ER Model works as follows. 

There are three account types. There are Users, the general account that has access to a unique Cart. The Administrator, and the Supplier who has access to specific webpages that allow for insertion of Resources. 

The Cart is unique and is tied by UserID, the same way the PaymentMethod is tied to a User, though the Cart is unique and One-One. With the PaymentMethod being One-Many. The cart is also similar to the Attributes table. Where the CartID is the entry into a cart, with the UserID specifying which cart it is put into. With the update or delete functions likely used to remove the items when they are either bought or removed. 

The Bank type is tied to the PaymentMethod, but doesn't or shouldn't recquire a DAO or Handler because its a normalization table used for documentation or output. Which is to say, it is there to simplify the application of PaymentMethod as to not write out the name of a Bank for every repeated or unique credit card. 

The Resources Table is going to be really simple, and with the innovation my group came up with thanks to external advice, we devised a Attributes table to further minimize the many tables. The way it works is that instead of making multiple tables for unique object types, like making a table for medicine, food, water, etc. We can now make a singular table that has multiple entries per resource. A good example would be that we're entering some form of food. In the Supplier tab, you'd enter the name of the food, its attributes, the quantity, all the logical things. Now, in the Attributes table, assuming the object is some certain kind of food, it will create entries for each unique attribute, from its meat type, to it being canned, or even its color or quantity. All of it tied to the Resource via its unique ResourceID, which will greatly minimize the complexity of the queries for searching specific attributes for food. Lowering the joins from double digit's to only two tables, maximum three if we begin to add Supplier's.


There other tables are the Reservation and Payment Logs. Though it would mean more columns, it could simplify the entire implementation by simply adding a LogType to the object, though that seems wholly uneccessary. The Rerservation Logs would keep track of reserved items, their quantity, ResourceID, and so forth. The PaymentLog will be unique to each individual, tied to them by their UserID, which keeps tracks of their purchases. As to make sure all information is always kept. Namely, the price, the items in question, as well as the Cart that was present at the moment. Keeping a "copy" of the cart for confirmation or any errors that would occur upon sending the objects. The PurchaseLogs, the same as the ReservationLogs, may require additions in the future. Namely, a date. Which will allow us to pair userID and Date together to link entire carts that were purchased within a day.



